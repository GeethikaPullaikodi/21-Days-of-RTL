one-hot mux using the following language constructs:

Construct
Ternary Operator
Case statement
If else block
Combinatorial For loop
And-or tree

Sv code:

`timescale 1ns / 1ps

module day13 (
  input  wire [3:0] a_i,
  input  wire [3:0] sel_i,

  // Output using ternary operator
  output wire  y_ter_o,
  // Output using case
  output logic y_case_o,
  // Output using if-else
  output logic y_ifelse_o,
  // Output using for loop
  output logic y_loop_o,
  // Output using and-or tree
  output logic y_aor_o
);

  // Using Ternary Operator
  assign y_ter_o = (sel_i[0]) ? a_i[0] :
                   (sel_i[1]) ? a_i[1] :
                   (sel_i[2]) ? a_i[2] :
                   (sel_i[3]) ? a_i[3] : 1'b0;

  // Using case
  always_comb begin
    case (sel_i)
      4'b0001: y_case_o = a_i[0];
      4'b0010: y_case_o = a_i[1];
      4'b0100: y_case_o = a_i[2];
      4'b1000: y_case_o = a_i[3];
      default: y_case_o = 1'b0;
    endcase
  end

  // Using if-else
  always_comb begin
    if      (sel_i[0]) y_ifelse_o = a_i[0];
    else if (sel_i[1]) y_ifelse_o = a_i[1];
    else if (sel_i[2]) y_ifelse_o = a_i[2];
    else if (sel_i[3]) y_ifelse_o = a_i[3];
    else               y_ifelse_o = 1'b0;
  end

  // Using for loop
  always_comb begin
    y_loop_o = 1'b0; // Default value
    for (int i = 0; i < 4; i++) begin
      if (sel_i[i]) y_loop_o = a_i[i];
    end
  end

  // Using And-Or Tree
  always_comb begin
    y_aor_o = (sel_i[0] & a_i[0]) | 
              (sel_i[1] & a_i[1]) | 
              (sel_i[2] & a_i[2]) | 
              (sel_i[3] & a_i[3]);
  end

endmodule


SV Testbench:

`timescale 1ns / 1ps

module day13_tb;

  // Testbench Signals
  reg  [3:0] a_i;
  reg  [3:0] sel_i;
  wire y_ter_o, y_case_o, y_ifelse_o, y_loop_o, y_aor_o;

  // DUT (Device Under Test) Instantiation
  day13 uut (
    .a_i(a_i),
    .sel_i(sel_i),
    .y_ter_o(y_ter_o),
    .y_case_o(y_case_o),
    .y_ifelse_o(y_ifelse_o),
    .y_loop_o(y_loop_o),
    .y_aor_o(y_aor_o)
  );

  // Test Procedure
  initial begin
    // Header for output
    $display("Time\t a_i\t sel_i\t y_ter y_case y_ifelse y_loop y_aor");
    $monitor("%0t\t %b\t %b\t  %b      %b      %b       %b     %b", 
              $time, a_i, sel_i, y_ter_o, y_case_o, y_ifelse_o, y_loop_o, y_aor_o);
    
    // Apply test cases
    a_i = 4'b1010; // Test input data
    
    sel_i = 4'b0001; #10;  // Select a_i[0]
    sel_i = 4'b0010; #10;  // Select a_i[1]
    sel_i = 4'b0100; #10;  // Select a_i[2]
    sel_i = 4'b1000; #10;  // Select a_i[3]

    // Test invalid cases (Multiple or No Selection)
    sel_i = 4'b0000; #10;  // No selection
    sel_i = 4'b1100; #10;  // Invalid multiple selection

    $finish; // End simulation
  end

  // Assertions to Check Correct Functionality
  always @(*) begin
    assert (y_ter_o == y_case_o) 
      else $error("Mismatch in ternary and case outputs at time %0t", $time);

    assert (y_ter_o == y_ifelse_o) 
      else $error("Mismatch in ternary and if-else outputs at time %0t", $time);

    assert (y_ter_o == y_loop_o) 
      else $error("Mismatch in ternary and loop outputs at time %0t", $time);

    assert (y_ter_o == y_aor_o) 
      else $error("Mismatch in ternary and and-or tree outputs at time %0t", $time);
  end

endmodule
