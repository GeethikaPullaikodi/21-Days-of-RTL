module day9 #(
  parameter VEC_W = 4  // Default width is 4 bits
)(
  input  wire [VEC_W-1:0] bin_i,  // Binary input
  output wire [VEC_W-1:0] gray_o  // Gray code output
);

  assign gray_o[VEC_W-1] = bin_i[VEC_W-1]; // MSB remains unchanged

  genvar i;
  generate
    for (i = VEC_W-2; i >= 0; i = i - 1) begin : gray_code_logic
      assign gray_o[i] = bin_i[i+1] ^ bin_i[i]; // XOR operation
    end
  endgenerate

endmodule


TestBench

module day9_tb;

  parameter VEC_W = 5; // Changeable parameter

  logic [VEC_W-1:0] bin_i;
  logic [VEC_W-1:0] gray_o;

  // Instantiate the Binary-to-Gray converter module
  day9 #(VEC_W) DAY9 (.*);

  // Compute expected Gray code
  function [VEC_W-1:0] compute_gray(input [VEC_W-1:0] bin);
    return bin ^ (bin >> 1);
  endfunction

  initial begin
    $display("Binary Input | Expected Gray | Output Gray | Result");
    
    for (int i = 0; i < 2**VEC_W; i = i + 1) begin
      bin_i = i;
      #5;
      
      if (gray_o === compute_gray(bin_i))
        $display("%b | %b | %b | PASS", bin_i, compute_gray(bin_i), gray_o);
      else
        $display("%b| %b  | %b | FAIL", bin_i, compute_gray(bin_i), gray_o);
    end
    
    $finish();
  end

endmodule
